// Code generated by Kitex v0.5.2. DO NOT EDIT.

package assetmanagement

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	asset_management "orbital_poc/hertz_server/kitex_gen/asset_management"
)

func serviceInfo() *kitex.ServiceInfo {
	return assetManagementServiceInfo
}

var assetManagementServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AssetManagement"
	handlerType := (*asset_management.AssetManagement)(nil)
	methods := map[string]kitex.MethodInfo{
		"queryAsset":  kitex.NewMethodInfo(queryAssetHandler, newAssetManagementQueryAssetArgs, newAssetManagementQueryAssetResult, false),
		"insertAsset": kitex.NewMethodInfo(insertAssetHandler, newAssetManagementInsertAssetArgs, newAssetManagementInsertAssetResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "asset_management",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func queryAssetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*asset_management.AssetManagementQueryAssetArgs)
	realResult := result.(*asset_management.AssetManagementQueryAssetResult)
	success, err := handler.(asset_management.AssetManagement).QueryAsset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAssetManagementQueryAssetArgs() interface{} {
	return asset_management.NewAssetManagementQueryAssetArgs()
}

func newAssetManagementQueryAssetResult() interface{} {
	return asset_management.NewAssetManagementQueryAssetResult()
}

func insertAssetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*asset_management.AssetManagementInsertAssetArgs)
	realResult := result.(*asset_management.AssetManagementInsertAssetResult)
	success, err := handler.(asset_management.AssetManagement).InsertAsset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAssetManagementInsertAssetArgs() interface{} {
	return asset_management.NewAssetManagementInsertAssetArgs()
}

func newAssetManagementInsertAssetResult() interface{} {
	return asset_management.NewAssetManagementInsertAssetResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryAsset(ctx context.Context, req *asset_management.QueryAssetRequest) (r *asset_management.QueryAssetResponse, err error) {
	var _args asset_management.AssetManagementQueryAssetArgs
	_args.Req = req
	var _result asset_management.AssetManagementQueryAssetResult
	if err = p.c.Call(ctx, "queryAsset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InsertAsset(ctx context.Context, req *asset_management.InsertAssetRequest) (r *asset_management.InsertAssetResponse, err error) {
	var _args asset_management.AssetManagementInsertAssetArgs
	_args.Req = req
	var _result asset_management.AssetManagementInsertAssetResult
	if err = p.c.Call(ctx, "insertAsset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
